#!/usr/bin/env python3
import os
from pathlib import Path


current: Path = Path(os.path.dirname(os.path.realpath(__file__)))
root: Path = current.parent.absolute()
graphics_source = root.joinpath("assets/graphics")
graphics_target = root.joinpath("src")
graphics_target.mkdir(parents=True, exist_ok=True)
print(f"Rendering PETSCII conversion template... {graphics_source}")
output: Path = graphics_target.joinpath("convert_animations.asm")
with open(output, mode="w") as o:
    o.write("""
/*
This file is autogenerated by bin/convert_c.py
*/

.macro packer(data) {
    .const FILE_TEMPLATE = "C64FILE"
	.var freq = 0
	.var this_char = 0
	.var last_char = 0
	.var screenData = List()
	.var hist = List(256)
	.var tmp = 0

	.for (var i=0;i<256; i++){
		.eval hist.set(i, 0)
	}

	.for (var i=0;i<data.size(); i++){
		.eval tmp = hist.get(data.get(i).number())
        .eval tmp++
		.eval hist.set(data.get(i).number(), tmp)
	}
	.var equal_pack_char = 0
	.for (var i=0; i<256;i++){
		.if(hist.get(i).number() == 0){
			.eval equal_pack_char = i
    	}
	}
	.eval screenData.add(equal_pack_char)
	.for (var i=0; i<data.size(); i++){
		.eval this_char = data.get(i)
		.if (freq > 0){
			.if(this_char == last_char){
				.eval freq++
			} else {
				.if ((freq > 4) || (last_char == equal_pack_char)){
					.eval screenData.add(equal_pack_char)
					.eval screenData.add(>freq)
					.eval screenData.add(<freq)
					.eval screenData.add(last_char)
				} else {
					.for (var i=0;i<freq;i++){
						.eval screenData.add(last_char)
					}
				}
				.eval freq = 1
				.eval last_char = this_char
			}
		}else{
			.eval freq = 1
			.eval last_char = this_char
		}
	}
	.if ((freq > 4) || (last_char == equal_pack_char)){
		.eval screenData.add(equal_pack_char)
		.eval screenData.add(>freq)
		.eval screenData.add(<freq)
		.eval screenData.add(last_char)
	} else {
		.for (var i=0;i<freq;i++){
			.eval screenData.add(last_char)
		}
	}
	.eval screenData.add(equal_pack_char)
	.eval screenData.add($ff)
	.eval screenData.add($ff)
	.eval screenData.add($ff)
    .fill screenData.size(), screenData.get(i)
}

.pc = $2000

    """)
    for filename in os.listdir(graphics_source):
        if filename.endswith(".c"):
            name: str = filename.strip(".c")
            working: Path = graphics_source.joinpath(filename)
            with open(working, mode="r") as f:
                lines: list = f.readlines()
                count: int = 0
                for line in lines:
                    if line[0].isnumeric():
                        data: str = line.strip(",\n")
                        if count == 2:
                            o.write(f".var txt_{name}_src = List()\n")
                        if count >= 2 and count < 27:
                            o.write(f".eval txt_{name}_src.add({data})\n")
                        if count == 27:
                            o.write(f".var col_{name}_src = List()\n")
                        if count >= 27:
                            o.write(f".eval col_{name}_src.add({data})\n")
                    count += 1
                o.write(f".segment txt_{name} [outPrg=\"../rsrc/txt_{name}.prg\"]\n")
                o.write(f"packer(txt_{name}_src)\n\n")
                o.write(f".segment col_{name} [outPrg=\"../rsrc/col_{name}.prg\"]\n")
                o.write(f"packer(col_{name}_src)\n\n")
        else:
            continue
