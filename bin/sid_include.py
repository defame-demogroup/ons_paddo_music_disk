#!/usr/bin/env python3
import os
from pathlib import Path
import glob


"""
This code generates a baseline file that we then adapt.
If you overwrite the src/sid_include.asm with the 
output of this render, it will be different! This is used
to simply bootstrap the demo coding because I don't want
to manually type all this stuff. 
"""


current: Path = Path(os.path.dirname(os.path.realpath(__file__)))
root: Path = current.parent.absolute()
music_source = root.joinpath("assets/music")
music_target = root.joinpath("src")
music_target.mkdir(parents=True, exist_ok=True)
print(f"Rendering SID labels...{music_source}")
output: Path = music_target.joinpath("sid_include.asm")
filenames = sorted( filter( os.path.isfile, glob.glob(str(music_source.joinpath("*.sid")))))

with open(output, mode="w") as o:
    o.write("""
/*
This file is autogenerated by bin/sid_include.py
to generate the SID menu. Do Not Modify!

Note that all SID files will load as follows:
-------------------------------------------------
$0f00: start song index (LDA with this value) 
$0f01: music speed (1 or 2)
$0f02/$0f03 lo/hi byte of the music init JSR
$0f04/$0f05 lo/hi byte of the music play JSR 
-------------------------------------------------
*/
.var sid_name = List()
.var sid_disk = List()
    """)
    max_length: int = 0
    count: int  = 0
    disk: int = 0
    for filename in filenames:
        if filename.endswith(".sid"):
            fname: str = os.path.basename(filename)
            if count > 43:
                disk = 1 
            ptr: str = str(count).rjust(2,'0')
            # clean up (Patto) [8580] [1x]-optimized
            # note: double-double-space-replace is on purpose! 
            name: str = ptr + ": " + fname.replace(".sid","").replace("(Patto)","").replace("[8580]","").replace("[1x]","").replace("[2x]","").replace("-optimized","").replace("  "," ").replace("  "," ").strip().upper()
            o.write(f"""
//{ptr}.prg = {fname}
.eval sid_name.add("{name}")
.eval sid_disk.add({disk})
            """)
            if len(name) > max_length:
                max_length = len(name)
            count += 1
    print(f"Max length {str(max_length)}")
