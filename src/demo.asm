/*
Demo Sourcecode

Memory map:
$0800         : BASIC start
$0ff0 - $3000 : Music Buffer
$3000 - $5000 : Petscii Buffer
$5000 - $C000 : Code
$C000 - $D000 : Load Buffer


ZeroPage:
$50-$5f Keyboard Handler
$9e-$9f IRQ Load Setup
$ab-$ae Scroller
$d0-$ef Exomizer
$fd-$fe GoatTracker
$f0-$f3 IRQ Load Runtime
$60/$61 General demo controller
*/
.var dzp_lo = $60
.var dzp_hi = $61

/*
Macros
*/
.import source "const.asm"
.import source "macro.asm"

/*
Memory management
*/
.import source "petscii_addresses.asm"

/*
Autogenerated Modules
*/
.import source "sid_include.asm"
.import source "petscii_include.asm"

/*
Template Code Modules
(these get loaded into the template space)
*/
.segment xys_routine [outPrg="ab.prg"]
*=$7000
.pc=* "XYSwinger Effect"
.import source "xyswinger.asm"
.pc = * "Tile Scroller Effect"
.import source "scroller.asm"

.segment megalogo [outPrg="ad.prg"]
*=$8500
.pc = * "Mega Logo"
.import source "biglogo_include.asm"


/*
Common Utils
*/

/*
Main Demo BASIC Entry
*/
.segment demo_main [outPrg="demo.prg"]
*=$0801
BasicUpstart2(start)

/*
Global flags
*/
enable_music:
.byte $00

enable_effect:
.byte $00

demo_state:
.byte $00

/*
Buffers:
*/

/*
Sprite
*/
.pc=$0a00
.for(var i=0;i<8;i++){
    .byte $ff, $ff, $ff
}
.for(var i=0;i<13;i++){
    .byte $00, $00, $00
}


// $0f00 - $3000 is reserved for music
.pc=$0f00 "Music Buffer (and temporary irq loader drivecode)"
loader_init:
.import source "loader_init.asm"
.var music_song = $0f00
.var music_speed = $0f01
.var music_init = $0f02
.var music_play = $0f04

// $3000 - $5000 is reserved for packed animation in main demo
.pc=$3000 "PETSCII Animation Buffers"


/*
Base code that never gets replaced
*/
.pc=$5000 "Code"
.pc=* "Exomizer"
.import source "exo.asm"

.pc=* "RLE Depacker"
.import source "rle_depacker.asm"

.pc=* "IRQ Loader"
.import source "loader_load.asm"

.pc=* "spinner"
.import source "spinner.asm"

.pc=* "keyboard handler"
keyboard:
.import source "keyboard.asm"

.pc=* "Music Functions"
.import source "music.asm"

.pc=* "Input Handlers"
press_space:
    jsr keyboard
    bcs press_space
    cmp #$20
    beq !finish+
    jmp press_space
!finish:
    rts

.pc=* "Utilities"
fill:
    //note: trying to balance size and speed with this, 
    //and can't use kernel as this whacks zeropage...
    stx fill_char
    sty fill_color
    ldx #$00
!loop:
    lda fill_char: #$20
    .for(var i=0;i<25;i++){
        sta $0400+(i*40),x
    }
    lda fill_color: #$00
    .for(var i=0;i<25;i++){
        sta $d800+(i*40),x
    }
    inx
    cpx #$28
    beq !+
    jmp !loop-
!:
    rts


.pc = * "Main DEMO"
start:
    lda #$00
    sta $d020
    sta $d021
    lda #$00
    sta $d020
    sta $d021
    ldx #$20
    ldy #$00
    jsr fill
    lda #$15
    sta $d018	
    lda#$80
    sta $0291
    //have to init scroller after clearing the screen!
    sei              
    lda #$7f       // Disable CIA
    sta $dc0d
    lda $d01a      // Enable raster interrupts
    ora #$01
    sta $d01a
    lda $d011      // High bit of raster line cleared, we're
    and #$7f       // only working within single byte ranges
    sta $d011
    lda #$01    // We want an interrupt at the top line
    sta $d012
    lda #<irq_loader 
    sta $0314    
    lda #>irq_loader
    sta $0315
    lda #$36
    sta $01
    cli  

/*
LOADING SPINNER
*/
    inc enable_effect
    jsr loader_init

    //fast ram clear for logo
    lda #$85
    sta dzp_hi
    tax
    lda #$00
    sta dzp_lo
    ldy #$00
    lda #$20
!:
    sta (dzp_lo),y
    inc dzp_lo
    bne !-
    inc dzp_hi
    inx
    cpx #$b8
    bne !- 

    load('0','7',$c000) //01.prg
    jsr m_disable
    jsr exo_exo
    jsr m_reset

    // //this is how we load screens - todo - load the data
    // load(70,70,$c000) //ff.prg
    // jsr exo_exo

    //load scroller-xyswinger merged template
    load('A','B',$b800) 
    jsr exo_exo

    //load mega logo template
    load('A','D',$b800) 

    //disable spinner
    dec enable_effect
    ldx #$20
    ldy #$00
    jsr fill
    jsr s_init
    //transition IRQ to next state
    inc demo_state
    inc enable_effect
    //decompress mega logo template
    jsr exo_exo

    jsr press_space

    dec enable_effect
    ldx #$20
    ldy #$00
    jsr fill
    //transition IRQ to next state
    inc demo_state
    inc enable_effect


!:
    jmp !-

/*
--------------------
Interrupt Management
--------------------
*/
.pc=* "irq"

//IRQ state machine
irq_state:
    lda demo_state
    cmp current_state: #$00
    bne !zero+
    rts
    sta current_state

!zero:  
    cmp #$00
    bne !one+
    // 0 = loader irq
    lda #$00
    sta $d012
    lda #>irq_loader
    sta $0315
    lda #<irq_loader
    sta $0314
    rts

!one:  
    cmp #$01
    beq !+
    jmp !two+
!:
    // 1 = intro irq a
    lda #$20
    sta $d012
    lda #>irq_intro_a
    sta $0315
    lda #<irq_intro_a
    sta $0314
    ldaStaMany($28,$07f8,$08,$01) //sprite ptr
    ldaStaMany($ae,$d001,$10,$02) // set y
    ldaStaMany($00,$d027,$08,$01) //fg color
    .var base=0
    .for(var i=0;i<8;i++){
        lda #<(base + (i*3*8*2))
        sta $d000 + (i*2)
    }
    lda #%11000000
    sta $d010
    lda #$00
    sta $d01c
    sta $d017
    sta $d01b
    lda #$ff
    sta $d015
    sta $d01d
    rts


!two:  
    cmp #$02
    bne !nope+
    // 2 = main irq
    lda #$00
    sta $d012
    lda #>irq_a
    sta $0315
    lda #<irq_a
    sta $0314
!nope:
    rts

//Actual IRQs
irq_loader:
    lda enable_effect
    beq !+
    jsr spinner_run
!:
    jsr irq_state
    lda #$ff 
    sta $d019
    jmp $ea81  


irq_intro_a:
    //inc $d020
    jsr irq_state
    lda #$91
    sta $d012
    lda #>irq_intro_a
    sta $0315
    lda #<irq_intro_a
    sta $0314
    //jsr s_scroll

    lda enable_effect
    beq !+
    jsr xys
    jsr s_scroll
    jsr m_play
!:
    lda #$ff 
    sta $d019
    jmp $ea81  


//standard main irq
irq_a:
    inc $d020
    jsr m_play
    dec $d020
    lda #$c0
    sta $d012
    lda #>irq_b
    sta $0315
    lda #<irq_b
    sta $0314
    lda #$ff 
    sta $d019
    jmp $ea81  

//multispeed irq
irq_b:
    lda music_speed
    cmp #$ff //multispeed flag from SID
    bne !+
    inc $d020
    jsr m_play
    dec $d020
!: 
    lda #$00
    sta $d012
    lda #>irq_a
    sta $0315
    lda #<irq_a
    sta $0314
    lda #$ff 
    sta $d019
    jmp $ea81  

/*
Template code that can be overwritten
*/
.pc=$7000 "Template code that is replaced"
template_base:




